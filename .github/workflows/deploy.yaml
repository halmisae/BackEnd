name: 도커 컨테이너 기반 스프링 백엔드 private subnet에 배포하기

on:
  push:
    branches:
      - main

jobs:
  ContainerBased-Deploy-Job:
    runs-on: ubuntu-latest
    steps:
      - name: Github Repository 의 파일 가져오기
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: application.yml 파일 생성
        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml

      - name: 테스트 및 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: AWS ECR 접근하기 위해 AWS credentials 설정
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ap-northeast-2
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: AWS ECR에 로그인하기
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Docker 이미지 생성
        run: docker build -t web-server .

      - name: Docker 이미지에 Tag 붙이기
        run: docker tag web-server ${{ steps.login-ecr.outputs.registry }}/web-server:latest

      - name: ECR에 Docker 이미지 push
        run: docker push ${{ steps.login-ecr.outputs.registry }}/web-server:latest

      - name: Set up SSH key for Bastion Host
        run: echo "${{ secrets.BASTION_PRIVATE_KEY }}" > bastion_key.pem
      - name: Set up SSH key for EC2 instance
        run: echo "${{ secrets.EC2_PRIVATE_KEY }}" > ec2_key.pem
      - name: Change permissions for SSH keys
        run: |
          chmod 600 bastion_key.pem
          chmod 600 ec2_key.pem
      - name: SSH to Bastion Host
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.BASTION_HOST }}
          username: ${{ secrets.BASTION_USERNAME }}
          key: bastion_key.pem
          script_stop: true
          script: |
            ssh -o StrictHostKeyChecking=no -i ec2_key.pem ${{ secrets.EC2_USERNAME }}@${{ secrets.EC2_HOST }} << 'EOF'
              docker stop web-server || true
              docker rm web-server || true
              docker pull 730335437837.dkr.ecr.ap-northeast-2.amazonaws.com/web-server:latest
              docker run -d --name web-server -p 8080:8080 730335437837.dkr.ecr.ap-northeast-2.amazonaws.com/web-server:latest
            EOF
